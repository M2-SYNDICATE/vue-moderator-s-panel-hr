import { apiClient } from './api'
import { authManager } from '@/utils/auth'

interface LoginCredentials {
  email: string
  password: string
}

interface LoginResponse {
  access_token: string
  refresh_token?: string
  expires_in?: number
  token_type?: string
  user?: {
    id: number
    username: string
    email: string
    role: string
  }
}

interface User {
  id: number
  username: string
  email: string
  role: string
}

class AuthService {
  async login(credentials: LoginCredentials): Promise<LoginResponse> {
    try {
      console.log('üîê Attempting login...')

      const response = await apiClient.post<LoginResponse>('/login', credentials)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const responseData = response.data

      console.log('‚úÖ Login response:', responseData)

      if (responseData && responseData.access_token) {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const tokenData = {
          access_token: responseData.access_token,
          refresh_token: responseData.refresh_token || responseData.access_token,
          expires_in: responseData.expires_in || 36000,
          token_type: responseData.token_type || 'Bearer',
        }

        console.log('üíæ Saving tokens...')

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
        authManager.setTokens(tokenData)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (responseData.user) {
          localStorage.setItem(
            'userFullName',
            responseData.user.username || responseData.user.email,
          )
          localStorage.setItem('userEmail', responseData.user.email)
        }

        return responseData
      }

      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞')
    } catch (error: any) {
      console.error('‚ùå Login error:', error)

      if (error.response?.status === 401) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
      }

      if (error.response?.status === 422) {
        throw new Error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
      if (error.response?.data?.detail) {
        throw new Error(error.response.data.detail)
      }

      throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏')
    }
  }

  async logout(): Promise<void> {
    try {
      console.log('üö™ Logging out...')

      const token = authManager.getAccessToken()
      if (token) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ logout —Å Bearer —Ç–æ–∫–µ–Ω–æ–º
        await apiClient.post('/logout', {})
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error)
    } finally {
      // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üßπ Clearing tokens and user data...')
      authManager.clearTokens()
      localStorage.removeItem('userFullName')
      localStorage.removeItem('userEmail')
    }
  }

  async getCurrentUser(): Promise<User | null> {
    try {
      console.log('üë§ Getting current user...')
      const response = await apiClient.get<User>('/me')
      return response.data
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return null
    }
  }

  async refreshToken(): Promise<boolean> {
    try {
      const refreshToken = authManager.getRefreshToken()
      if (!refreshToken) {
        console.log('‚ùå No refresh token available')
        return false
      }

      console.log('üîÑ Refreshing token via authService...')

      const response = await apiClient.post<LoginResponse>('/refresh', {
        refresh_token: refreshToken,
      })

      const responseData = response.data

      if (responseData && responseData.access_token) {
        const tokenData = {
          access_token: responseData.access_token,
          refresh_token: responseData.refresh_token || refreshToken,
          expires_in: responseData.expires_in || 3600,
          token_type: responseData.token_type || 'Bearer',
        }

        authManager.setTokens(tokenData)
        console.log('‚úÖ Token refreshed successfully via authService')
        return true
      }

      return false
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
      authManager.clearTokens()
      return false
    }
  }

  isAuthenticated(): boolean {
    const isAuth = authManager.isAuthenticated()
    console.log('üîç Is authenticated:', isAuth)
    return isAuth
  }

  getUserData(): any {
    return authManager.getUserData()
  }
}

export const authService = new AuthService()
